# 《Java核心技术》回顾笔记

- Java对**大小写**敏感

- 基本类型：

    |类型名|字节数|范围|
    |:---:|:---:|:---:|
    |int|4字节|-2 147 483 648 ~ 2 147 483 647|
    |short|2字节|-32 768 ~ 32 767|
    |long|8字节|-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807|
    |byte|1字节|-128 ~ 127|
    |float|4字节|大约±3.402 823 47E+38F(有效6~7位)|
    |double|8字节|大约±1.797 693 134 862 315 70E+308(有效15位)|
    |char|||
    |boolean|||

- `123L`表示长整形(long)123 

- `0x123`表示16进制数123 

- `010`表示8进制数10 

- `123.0F`表示单精度浮点型(float)123.0

- 一个小数默认类型为`double`，也可以显示说明：`123.0D`

- **Java没有任何无符号类型(unsigned type)**
    
- `\u`可以出现在任何位置，也是唯一一个能出现在任何位置的转义序列符，如：

    ```[Java]
    public static void main(String\u005B\u005D args) {
        System.out.println("Hello Java");
    }
    ```

- 常见的转义符：

    |转义序列|名称|Unicode值|
    |:---:|:---:|:---:|
    |\b|退格|\u0008|
    |\t|制表|\u0009|
    |\n|换行|\u000a|
    |\r|回车|\u000d|
    |\"|双引号|\u0022|
    |\'|单引号|\u0027|
    |\\\\|反斜杠|\u005c|

- 整型值与布尔值之间不能进行相互转换，因此不会出现以下错误：

    ```[Java]
    if (n = 0) // Error 整型值不能与布尔值进行互换
    ```

- `const`是Java的保留字，但目前并没有使用，在Java中必须使用`final`定义常量

- 整数被0除将会产生一个异常（`java.lang.ArithmeticException: / by zero`）

- 浮点数被0除将会得到无穷大或NaN结果`System.out.println(1.0 / 0); // 输出:Infinity`

- `&&`和`||`是按照“短路”的方式求值的，如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了

- `&`和`|`不按照“短路”的方式求值，即在得到计算结果之前，一定要计算两个操作数的值

- 从JDK5.0开始，不必在数学方法名和常量名前添加前缀`Math`，而只要在源文件的顶部添加以下代码就可以了：

    ```[Java]
    import static java.lang.Math.*;
    ```

- 数值类型之间的转换，如图：

    ![](https://github.com/yangruihan/Notes/blob/master/Image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%90%88%E6%B3%95%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?raw=true)
    
    其中6个黑色箭头表示无信息丢失的转换，另外3个灰色箭头表示可能有精度损失的转换。

- 两个数值进行二元操作时，先将两个操作数转换为同一种类型，然后再进行计算，其中：
    - 如果两个操作数中有一个是`double`，则另一个操作数转换成`double`
    - 否则两个操作数中有一个是`float`，则另一个操作数转换成`float`
    - 否则两个操作数中有一个是`long`，则另一个操作数转换成`long`
    - 否则两个操作数都将被转换成`int`

- 当想将一个浮点数转换成最接近的整数时，不应该使用强制类型转换，而是使用`Math.round`：
    
    ```[Java]
    double x = 9.997;
    int nx = (int)Math.round(x); // 这里需要进行(int)强制转换是因为 Math.round 返回值为 long
    // nx = 10
    
    int nx = (int)x;
    // nx = 9
    ```

- 不要在`boolean`类型与任何数值类型之间进行强制类型转换，如果需要可以采用以下形式：

    ```[Java]
    boolean b = true;
    int x = b ? 1 : 0;
    ```

- `a += b += c` 等价于 `a += (b += c)` 因为`+=`操作符**右边**优先级大于**左边**

- Java中的`String`类没有提供用于修改字符串的方法，因此称其为**不可变字符串**

- `StringBuilder`类的前身为`StringBuffer`类，其效率略微有些低，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑，则应该用`StringBuilder`

- 如果要从控制台读取密码，应使用`Console`这个类:

    ```[Java]
    Console cons = System.console();
    String username = cons.readLine("User name: ");
    char[] passwd = cons.readPassword("Password: ");
    ```

    *注：密码最好使用char[]来进行存储，因为String是不可修改的，可能会残留在内存中，造成安全隐患，而使用char[]进行存储，一旦对密码进行处理应立即用一个填充值将其覆盖，这样更加安全*

- 通过`System.out.printf("%d", i)`来进行格式化输出，通过`String s = String.format("%d", i)`来生成格式化字符串

- 格式化输出**参数索引**例子：

    ```[Java]
    System.out.printf("%1$s %2$tB %2$te, %2$tY", "Due date:", new Date());
    // 输出结果： Due date: 十二月 10, 2015
    ```

- 文件输入与输出：
    - 输入： `Scanner in = new Scanner(new File("myFile"));` 接下来就跟操作`Scanner(System.in)`一样对文件进行读取
    - 输出： `PrintWriter out = PrintWriter("myFile");` 接下来就跟操作`System.our`一样对文件进行输出，若文件不存在先生成一个 

- Java中不允许在嵌套的两个块中声明同名的变量

- 带标签的`break`语句：

    ```[Java]
    int i = 0;

    label:
    while (i < 10) {
        System.out.print(i + ": ");
        for (int j = 0; j < 10; j++) {
            System.out.print(j + " ");
            if (j == 5) {
                break label;
            }
        }
        i++;
    }
    // 输出结果： 0: 0 1 2 3 4 5 
    ```

- 带标签的`continue`语句同上

- 如果基本的整数和浮点数精度不能够满足需求，那么可以使用`java.math`包中的两个类：`BigInteger`和`BigDecimal`。这两个类可以处理包含任意长度数字序列的数值。其中`BigInteger`类实现了任意精度的整数的运算，`BigDecimal`类实现了任意精度的浮点数运算。

- 一个更加简单的方式打印数组中的所有值，就是利用`Arrays`类的`toString`方法，调用`Arrays.toString(a)`，返回一个包含数组元素的字符串，这些元素被放置在括号内，并用`,`分隔，例如：`[1,2,3,4,5]`。

- 在 Java 中允许数组的长度为0，这在当一个方法的返回值是一个数组且恰好为空时尤其有用，注意区分返回`new int[0]`和`null`的区别。

- 当需要进行数组之间值的拷贝时（注意，这里不是变量的拷贝，即两个数组最终不是引用同一个变量），需要用到`Arrays`类的`copyOf`方法：

    ```[java]
    int[] copiedArrays = Arrays.copyOf(oldArrays, oldArrays.length);    // 第二个参数是新数组的长度
    ```

    **通常用这个方法来增加数组的大小：**
    
    ```[java]
    arrays = Arrays.copyOf(arrays, 2 * arrays.length);
    // 如果数组元素是数值型，那么多余的元素将被赋值为 0
    // 如果数组元素是布尔型，那么多余的元素将被赋值魏 false
    // 如果长度参数小于原始数组的长度，则只拷贝最前面的对应个数的元素
    ```

- 要想快速地打印一个二维数组的数据元素列表时，可以调用：`System.out.println(Arrays.deepToString(a));`
    
    输出格式为：`[[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]']]`

- 让数组中的两行交换：

    ```[java]
    int[] temp = a[i];
    a[i] = a[i + 1];
    a[i + 1] = temp;
    ```

- 一个**对象变量**并没有实际包含一个对象，而仅仅**引用**一个对象。在 Java 中，任何对象变量的值都是对存储在另外一个地方的一个对象的引用。`new`操作符的返回值也是一个引用

- 局部变量不会自动地初始化为`null`，而必须通过调用`new`或将它们设置为`null`进行初始化

- 在一个文件中，只能有一个公有类，但可以有任意数目的非公有类

- 如果需要返回一个可变数据域的拷贝，就应该使用克隆（clone）

- Java 程序设计语言对对象采用的不是引用调用，实际上，**对象引用进行的是值传递**

- 在 Java 程序设计语言中，方法参数的使用情况：

    - 一个方法不能修改一个基本数据类型的参数（即数值型和布尔型）
    - 一个方法可以改变一个对象参数的状态
    - 一个方法不能实现让对象参数引用一个新的对象

- 调用构造器的具体处理步骤：

    1. 所有数据域被初始化为默认值（0、false或null）
    2. 按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块
    3. 如果构造器第一行调用了第二个构造器，则执行第二个构造器主体
    4. 执行这个构造器的主体

- 类设计技巧：

    - 一定将数据设计为私有
    - 一定要对数据初始化
    - 不要在类中使用过多的基本数据类型
    - 不是所有的域都需要独立的域访问器和域更改器
    - 使用标准格式进行类的定义

        按以下顺序进行类的定义：
        - 公有访问特性部分
        - 包作用域访问特性部分
        - 私有访问特性部分
        
        在每个部分中，应该按照下列顺序列出：
        - 实例方法
        - 静态方法
        - 实例域
        - 静态域

    - 将职责过多的类进行分解
    - 类名和方法名要能体现它们的职责

- 使用`super`调用构造器的语句必须是子类构造器的**第一条语句**

- **Java 不支持多继承**

- 在类的继承中，覆盖方法时，一定要保证返回类型的兼容性，允许子类将覆盖方法的返回类型定义为原返回类型的子类型

