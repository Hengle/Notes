# 《Java核心技术》回顾笔记

- Java对**大小写**敏感

- 基本类型：

    |类型名|字节数|范围|
    |:---:|:---:|:---:|
    |int|4字节|-2 147 483 648 ~ 2 147 483 647|
    |short|2字节|-32 768 ~ 32 767|
    |long|8字节|-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807|
    |byte|1字节|-128 ~ 127|
    |float|4字节|大约±3.402 823 47E+38F(有效6~7位)|
    |double|8字节|大约±1.797 693 134 862 315 70E+308(有效15位)|
    |char|||
    |boolean|||

- `123L`表示长整形(long)123 

- `0x123`表示16进制数123 

- `010`表示8进制数10 

- `123.0F`表示单精度浮点型(float)123.0

- 一个小数默认类型为`double`，也可以显示说明：`123.0D`

- **Java没有任何无符号类型(unsigned type)**
    
- `\u`可以出现在任何位置，也是唯一一个能出现在任何位置的转义序列符，如：

    ```[Java]
    public static void main(String\u005B\u005D args) {
        System.out.println("Hello Java");
    }
    ```

- 常见的转义符：

    |转义序列|名称|Unicode值|
    |:---:|:---:|:---:|
    |\b|退格|\u0008|
    |\t|制表|\u0009|
    |\n|换行|\u000a|
    |\r|回车|\u000d|
    |\"|双引号|\u0022|
    |\'|单引号|\u0027|
    |\\\\|反斜杠|\u005c|

- 整型值与布尔值之间不能进行相互转换，因此不会出现以下错误：

    ```[Java]
    if (n = 0) // Error 整型值不能与布尔值进行互换
    ```

- `const`是Java的保留字，但目前并没有使用，在Java中必须使用`final`定义常量

- 整数被0除将会产生一个异常（`java.lang.ArithmeticException: / by zero`）

- 浮点数被0除将会得到无穷大或NaN结果`System.out.println(1.0 / 0); // 输出:Infinity`

- `&&`和`||`是按照“短路”的方式求值的，如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了

- `&`和`|`不按照“短路”的方式求值，即在得到计算结果之前，一定要计算两个操作数的值

- 从JDK5.0开始，不必在数学方法名和常量名前添加前缀`Math`，而只要在源文件的顶部添加以下代码就可以了：

    ```[Java]
    import static java.lang.Math.*;
    ```

- 数值类型之间的转换，如图：

    ![](https://github.com/yangruihan/Notes/blob/master/Image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%90%88%E6%B3%95%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?raw=true)
    
    其中6个黑色箭头表示无信息丢失的转换，另外3个灰色箭头表示可能有精度损失的转换。