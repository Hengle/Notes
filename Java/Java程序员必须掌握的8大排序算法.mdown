# Java 程序员必须掌握的8大排序算法
本文主要详解了Java语言的8大排序的基本思想以及实例解读，详细请看下文

## 8种排序之间的关系
![](https://github.com/yangruihan/Notes/blob/master/Image/8%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true)

## 一、直接插入排序
- 基本思想：
在要排序的一组数中，假设前面(n-1)[n>=2] 个数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。
- 实例：

![](https://github.com/yangruihan/Notes/blob/master/Image/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%AE%9E%E4%BE%8B.png?raw=true)

- 代码实现：
```[Java]
public class InsertionSorting {

    public static void main(String[] args) {
        int a[] = { 49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35,
                25, 53, 51 };

        int temp = 0;
        for (int i = 1; i < a.length; i++) {
            int j;
            temp = a[i];
            
            for (j = i - 1; j >= 0 && temp < a[j]; j--)
                a[j + 1] = a[j]; // 将大于temp的值整体向后移一个单位
            
            a[j + 1] = temp;
        }

        for (int i = 0; i < a.length; i++)
            System.out.print(a[i] + " ");
    }
}
```

## 二、希尔排序（最小增量排序）
- 基本思想：
算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。
- 实例：

![](https://github.com/yangruihan/Notes/blob/master/Image/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.png?raw=true)

- 代码实现：
```[Java]
public class ShellSort {

    public static void main(String[] args) {
        int a[] = { 1, 54, 6, 3, 78, 34, 12, 45, 56, 100 };
        double d1 = a.length;
        int temp = 0;
        while (true) {
            d1 = Math.ceil(d1 / 2);
            int d = (int) d1; // 分组的间隔
            // 遍历每组
            for (int x = 0; x < d; x++) {
                for (int i = x + d; i < a.length; i += d) {
                    int j;
                    temp = a[i];
                    // 每组中进行直接插入排序
                    for (j = i - d; j >= 0 && temp < a[j]; j -= d)
                        a[j + d] = a[j];
                    a[j + d] = temp;
                }
            }
            // 当间隔为1时，就已经排序好了
            if (d == 1)
                break;
        }

        for (int i = 0; i < a.length; i++)
            System.out.print(a[i] + " ");
    }
}
```

## 三、简单选择排序
- 基本思想：
在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。
- 实例

![](https://github.com/yangruihan/Notes/blob/master/Image/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png?raw=true)

- 代码实现：
```[Java]
public class SelectionSort {

    public static void main(String[] args) {
        int a[] = { 1, 54, 6, 3, 78, 34, 12, 45 };
        for (int i = 0; i < a.length; i++) {
            int min = a[i];
            int t = i;
            for (int j = i + 1; j < a.length; j++) {
                if (min > a[j]) {
                    min = a[j];
                    t = j;
                }
            }
            a[t] = a[i];
            a[i] = min;
        }
        for (int i = 0; i < a.length; i++)
            System.out.print(a[i] + " ");
    }
}
```

## 四、堆排序
- 基本思想：
堆排序是一种树形选择排序，是对直接选择排序的有效改进。

    堆的定义如下：具有n个元素的序列（h1, h2,..., hn），当且仅当满足（hi>=h2i, hi>=h2i+1）或（hi<=h2i, hi<=h2i+1)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。堆顶为根，其他为左子树、右子树。初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。
- 实例：

    初始序列：46, 79, 56, 38, 40, 84

    建堆：

//插入图片

    交换，从堆中踢出最大数：

//插入图片

    依次类推：最后堆中剩余的最后两个节点交换，踢出一个，排序完成。

- 代码实现：
```[Java]
public class HeapSort {
    // 堆排序
    public void heapSort(int[] a) {
        // 循环建堆
        for (int i = 0; i < a.length - 1; i++) {
            // 建堆
            buildMaxHeap(a, a.length - 1 - i);
            // 交换栈顶和最后一个元素
            int temp = a[a.length - 1 - i];
            a[a.length - 1 - i] = a[0];
            a[0] = temp;
        }
    }

    // 建堆
    public void buildMaxHeap(int[] data, int lastIndex) {
        // 从lastIndex处节点的父节点开始（即从最后一个节点的父节点开始）
        for (int i = (lastIndex - 1) / 2; i >= 0; i--) {
            // k保存正在判断的节点
            int k = i;
            // 如果当前k节点的子节点存在
            while (k * 2 + 1 <= lastIndex) {
                // k节点左子节点的索引存在
                int biggerIndex = 2 * k + 1;
                // 如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在
                if (biggerIndex < lastIndex) {
                    // 如果右子节点的值较大
                    if (data[biggerIndex] < data[biggerIndex + 1]) {
                        biggerIndex++;
                    }
                }
                // 如果k节点的值小于其他较大的子节点的值
                if (data[k] < data[biggerIndex]) {
                    // 交换他们
                    int temp = data[k];
                    data[k] = data[biggerIndex];
                    data[biggerIndex] = temp;
                    // 将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值
                    k = biggerIndex;
                } else {
                    break;
                }
            }
        }
    }

    public static void main(String[] args) {
        int a[] = { 49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35,
                25, 53, 51 };

        HeapSort heapSort = new HeapSort();
        heapSort.heapSort(a);
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }

    }
}
```

## 五、冒泡排序
- 基本思想：
在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。
- 实例：
//插入图片
- 代码实现：
```[Java]
public class BubbleSort {
    public static void main(String[] args) {
        int a[] = {49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35, 25, 53, 51};
        int temp = 0;
        for (int i = 0; i < a.length - 1; i++) {
            for (int j = 0; j < a.length - 1 - i; j++) {
                if (a[j] > a[j + 1]) {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }

        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
```

## 六、快速排序
- 基本思想：
选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。
- 实例：
- 代码实现：
```[Java]
public class QuickSort {
    public static void main(String[] args) {
        int a[] = {49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35, 25, 53, 51};
        QuickSort quickSort = new QuickSort();
        quickSort.quickSort(a);
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }

    public void quickSort(int[] a) {
        if (a.length > 0) {
            _quickSort(a, 0, a.length - 1);
        }
    }

    public void _quickSort(int[] list, int low, int high) {
        if (low < high) {
            int middle = getMiddle(list, low, high);
            _quickSort(list, low, middle - 1);
            _quickSort(list, middle + 1, high);
        }
    }

    public int getMiddle(int[] list, int low, int high) {
        int temp = list[low]; // 数组的第一个元素作为中轴
        while (low < high) {
            while (low < high && list[high] >= temp) {
                high--;
            }
            // 比中轴小的记录移植低端
            list[low] = list[high];
            while (low < high && list[low] <= temp) {
                low++;
            }
            // 比中轴大的记录移植高端
            list[high] = list[low];
        }
        list[low] = temp; // 中轴记录到尾
        return low;
    }
}
```

## 七、归并排序
- 基本思想：
归并(Merge)排序法是将两个(或两个以上)有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。
- 实例：
- 代码实现：
```[Java]
public class MergeSort {
    public static void main(String[] args) {
        int a[] = {49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35, 25, 53, 51};
        MergeSort mergeSort = new MergeSort();
        mergeSort.mergeSort(a, 0, a.length - 1);
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }

    public void mergeSort(int[] data, int left, int right) {
        if (left < right) {
            // 找出中间索引
            int center = (left + right) / 2;
            // 对左边数组进行递归
            mergeSort(data, left, center);
            // 对右边数组进行递归
            mergeSort(data, center + 1, right);
            // 合并
            merge(data, left, center, right);
        }
    }

    public void merge(int[] data, int left, int center, int right) {
        int[] tempArr = new int[data.length];
        int mid = center + 1;
        // third记录中间数组的索引
        int third = left;
        int temp = left;
        while (left <= center && mid <= right) {
            // 从两个数组中取出最小的放入中间数组
            if (data[left] <= data[mid]) {
                tempArr[third++] = data[left++];
            } else {
                tempArr[third++] = data[mid++];
            }
        }
        //剩余部分依次放入中间数组
        while (mid <= right) {
            tempArr[third++] = data[mid++];
        }
        while (left <= center) {
            tempArr[third++] = data[left++];
        }
        //将中间数组中的内容复制回原数组
        while (temp <= right) {
            data[temp] = tempArr[temp++];
        }
    }
}
```

## 八、基数排序
- 基本思想：
将所有待比较数值(正整数)统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。
- 实例：
- 代码实现：
```[Java]
public class RadixSort {
    public static void main(String[] args) {
        int a[] = {49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 101, 56, 17, 18, 23, 34, 15, 35, 25, 53, 51};
        RadixSort radixSort = new RadixSort();
        radixSort.radixSort(a);
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }

    public void radixSort(int[] array) {
        // 首先确定排序的趟数
        int max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        int time = 0;
        // 判断位数
        while (max > 0) {
            max /= 10;
            time++;
        }
        // 建立10个队列
        List<ArrayList> queue = new ArrayList<ArrayList>();
        for (int i = 0; i < 10; i++) {
            ArrayList<Integer> queue1 = new ArrayList<Integer>();
            queue.add(queue1);
        }
        // 进行time次分配和收集
        for (int i = 0; i < time; i++) {
            // 分配数组元素
            for (int anArray : array) {
                // 得到数字的第time+1位数
                int x = anArray % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);
                ArrayList<Integer> queue2 = queue.get(x);
                queue2.add(anArray);
                queue.set(x, queue2);
            }
            int count = 0;//元素计数器;
            //收集队列元素;
            for (int k = 0; k < 10; k++) {
                while (queue.get(k).size() > 0) {
                    ArrayList<Integer> queue3 = queue.get(k);
                    array[count] = queue3.get(0);
                    queue3.remove(0);
                    count++;
                }
            }
        }
    }
}
```



