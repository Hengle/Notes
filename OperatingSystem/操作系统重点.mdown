# 操作系统重点

## 第一章 操作系统概述

### 批处理操作系统
#### 1. 分类
1. 单道批处理系统

2. 多道批处理系统

#### 2. 主要特征
1. **成批处理。**操作员把用户提交的作业分批进行处理，每批中的作业将由操作系统或监督程序负责作业间自动调度执行。

2. **多道程序运行。**按多道程序设计的调度原则，从一批后备作业中选取多道作业调入内存并组织它们运行，称为**多道批处理**。

3. **脱机工作方式。**用户提交作业之后直到获得结果之前就不再和计算机打交道。作业提交的方式可以是直接交给计算中心的管理操作员，也可以是通过远程通信线路提交，提交的作业由系统外存收容称为**后被作业**。

### 操作系统的特征
1. **并发性：**计算机系统中存在若干个运行的程序，系统中多个活动同时进行，I/O操作和计算机操作重叠。

2. **共享性：**是指多个计算任务对系统资源的共同享用。

3. **不确定性：**在多道程序环境下，操作系统的运行是在随机的环境下运行的。这种随机环境的含义是：操作系统不可能对所运行的程序的行为以及硬件设备的情况做出任何事先的假定。

4. **虚拟性：**是指把一个物理上的实体变为若干个逻辑上的对应物。

## 第二章 进程管理

### 程序的并发执行及其特性
在现代计算机中广泛采用多道程序设计技术，使多种硬件资源能并行工作。在多道系统中，由于程序的运行环境发生了根本的变化，因此程序的执行方式也有了本质的变化，它们从顺序执行成为并发执行。

### 进程的组成
1. **程序：**程序是完成某一独立功能的指令集合。它是进程运行所对应的执行代码，它规定进程一次运行活动所要完成的功能。

2. **数据：**数据是程序在执行时所作用的对象，它还包括程序执行时使用的内存工作区等，所以，**程序和数据是进程存在的物质基础。**

3. **\*进程控制块（Proccess Control Block, PCB):** 进程控制块是进程的描述信息及控制信息，是一个数据结构。**进程控制块是系统内进程存在的唯一标志，系统根据进程控制块才能感知到进程的存在。**系统中有多少个进程，就有多少个进程控制块。

    对于用户进程其程序和数据存放在**内存用户区**，而进程控制块存放在**内存系统区**。其间通过指针逻辑关联。
    ```
    内存：
    ---------|--------------
     系统区   |     用户区
             |    
    |-----|  |  |---------|
    | PCB |--+->| program |
    |-----|  |  |---------|
             |  |  data   |
             |  |---------|
             |
    ```

### 进程的状态及其转换
#### 进程的三种基本状态
1. **运行状态（Run）：**指进程获得了处理机，它的程序正在处理机上运行时的状态。

2. **就绪态（Ready）：**指进程已具备了可在处理机上运行的条件，但只因处理机已被其他进程占用而处于一种等待处理机的状态。

3. **等待态（Wait）：**又叫阻塞态，当一个在处理机上运行的进程，因等待某一事件发生而暂时不能继续运行时，则称此进程处于等待状态。

#### 进程的辅助状态
1. **初始态（创建态）：**一个进程刚刚建立还没有转换为就绪态时的一种状态，当进程创建成功后，就由新状态转入就绪态。

2. **终止态：**进程已经运行完毕或异常结束，但还没有被撤销时所处的一种状态。

#### 进程状态的转换
```
              |-------|
        +---->| 运行态 |
        |     |-------|
        |       |   |
        |       |   |
        |       |   |
     |-------|  |   |  |-------|
     | 就绪态 |<-+   +->| 等待态 |
     |-------|<--------|-------|
```

### 进程的同步与互斥
#### 临界资源和临界区
- 我们把一次只允许一个进程使用的资源称为**临界资源**。

- 访问临界资源的程序段称为**临界区**（或**临界段**）。

#### 进程的同步与互斥
- 我们把这种进程间为了完成一个共同的目标，必须互相合作的协同工作、有前后次序的直接制约关系称为**进程的同步**。

- 多个进程因不能同时访问临界资源而产生的间接制约关系称为**进程的互斥**。

#### 信号量及 P、V 操作原语
- **信号量**：**结构型信号量**是由两个成员组成的数据结构（亦称为**记录型信号量**），其中一个成员是整型变量，表示该信号量的值；另一个是指向PCB的指针。当多个进程都等待同一信号量时，它们就排成一个先入先出的队列，由信号量的指针项指出该队列的队头，而 PCB 队列是通过 PCB 本身所包含的指针项进行链接的，最后一个 PCB 的链接指针为0。**信号量的值仅能由 PV 操作来改变**

- 信号量的值是有一定意义的：当它大于 0 时，表示当前可用资源的实体个数。当它小于 0 时，其绝对值表示等待使用该资源的进程个数，即在该信号量队列上排队的 PCB 的个数。其结构如图：
    ```
        |-----------|      ->|-------|      ->|-------|      ->|-------|
        | value(-3) |     /  | PCB 1 |     /  | PCB 2 |     /  | PCB 3 |
        |-----------|    /   |-------|    /   |-------|    /   |-------|
        |  pointer -+---/    |      -+---/    |      -+---/    |   0   |
        |-----------|        |-------|        |-------|        |-------|
    ```

- P 操作步骤（设信号量为S），即资源的申请：
    1. 信号量的值减1，即`S = S - 1`
    2. 如果 S ≥ 0，则该进程继续执行；如果 S ＜ 0，则把该进程置为等待态并将该进程 PCB 送入到信号量的等待队列末尾。

- V 操作步骤（设信号量为S），即资源的释放：
    1. 信号量的值加1，即`S = S + 1`
    2. 如果 S ＞ 0，则该进程继续执行；如果 S ≤ 0，则释放 S 信号量队列上的第一个 PCB（即信号量指针项所指向的 PCB）所对应的进程（把等待态改成就绪态），执行 V 操作的进程继续运行。

## 第三章 作业管理及用户接口

### 操作系统的用户接口
操作系统为用户提供了两种类型的接口：
1. **程序级接口**：即**系统调用**，又称**广义指令**，用户可以在程序中直接使用系统调用指令来调用操作系统的有关功能。
2. **作业控制级接口**：其中又分别为脱机用户与联机用户设置了不同的接口，即系统提供的作业控制语言或键盘操作命令，用户可以使用它们向系统提出作业运行的步骤，控制作业的运行。

### 处理机的状态及特权指令
处理机执行时的工作状态分为**管态**和**目态**。处理机在这两种不同的工作状态下使用硬件的权限是不同的：
- **管态**：处理机在执行**操作系统的程序代码**时所处的状态。在管态下，处理机可以执行**特权指令**（特权指令是指只能由操作系统使用的机器指令，它们通常是与控制和管理系统资源有关的指令，如启动通道或外设工作的指令等）。此外，在管态下程序可以访问**内存的任何区域**。

- **目态**：处理机在执行**用户程序和其他系统应用程序**时所处的状态。处理机运行在目态时不能执行特权指令，也不能访问**用户作业存储区域**以外的内存单元，否则将会引起中断。

### 作业状态
```
                             输入井 |----------------|
                               ^   |  +-> 运行       |输出井
                               |   |  |    |        |  |
    用户 ---> 提交态 ---> 后备态 -+-> |  |    |        | -+-> 完成态 ---> 用户
                               |   |  就绪<-+-> 阻塞 |
                            作业调度 |  ^---------|  |
                                   |     执行态      |
                                   |----------------|
```
1. **提交状态**：程序员把已存储作业实体的某种介质提交给机房后，管理员正在向计算机键入其作业时所处的状态。

2. **后备状态**：作业信息输入到计算机系统硬盘的输入井中等待调度运行时的状态。

3. **执行状态**：硬盘输入井中处于后备状态的作业，被作业调度程序调度选中并装入内存中投入运行时的状态。

4. **完成状态**：作业正常运行结束或因发生错误而终止时，释放其占有的全部资源，准备离开系统时的状态。

### 常用的作业调度算法
1. **先来先服务算法（FCFS）**：按照作业进入后备作业队列的先后顺序调度作业运行。

2. **短作业优先算法（Shortest Job First, SJF）**：在后备作业队列中选择运行时间最短的作业优先运行。

3. **最高响应比优先算法（Highest Response-radio Next, HRN）**：从后备作业中选择响应比最大的作业优先运行。其中：**响应比 = 作业等待时间/作业运行时间**。

4. **优先级算法**：在多道批处理系统中，通常根据作业的某些属性，为作业规定一个调度优先级。作业调度程序则根据后备作业的优先级高低决定调度的先后顺序。优先级算法又分：**静态优先数法**和**动态优先数法**。

5. **资源搭配算法**：根据系统中的状况和作业对资源的需求决定作业选择的调度算法。

## 第四章 存储管理

### 物理地址与物理空间
- 内存以字节为编址单位，在容量为 n 的主存储器中，每个单元有唯一的编号，分别为 0, 1, 2, ..., n-1，这个唯一的编号就是内存单元的**物理地址（即绝对地址）**，可直接寻址。

- 为了保证 CPU 执行程序指令时能正确地访问存储单元，因此，需要**存储管理机制**提供**地址映射功能**将用户程序中的逻辑地址转换为运行时可由机器直接寻址的物理地址，这一过程称为**地址映射**或**地址重定位**。

### 地址重定位方式
1. **静态地址重定位**：是在程序装入过程中，由操作系统的重定位装入程序一次完成作业的地址转换过程，以后不再转换，即直接修改有关指令中的地址代码，把这些地址代码从逻辑地址换成物理地址。
    
    优点：
    1. 由于在程序执行前就完成了地址转换，因此程序执行的速度较快。
    2. 地址转换方式无需硬件支持，在硬件简单的机器中易于实现。
    
    缺点：
    1. 程序一经地址转换后，其占用的存储位置就不能变动了，所以静态重定位的程序不能在内存中移动。
    2. 程序必须分配连续的存储空间，不能把程序放在若干个不连续的区域内，这些不利于存储空间的充分利用。
    3. 程序中所涉及要转换地址的指令，不管程序运行过程中是否会执行到，都必须转换。这就有可能有些指令实施了地址转换，但又根本不会执行，因此，做了不必要的工作。
    4. 很难做到程序和数据的共享。
    5. 用户必须事先确定所需的存储量，若所需的存储量超过可用存储空间时，用户必须考虑覆盖结构。

2. **动态地址重定位**：作业在装入时，不进行地址转换，而是直接把作业装到分配的主存区域中，执行过程中再进行地址重定位。
    
    优点：
    1. 用户作业装入主存空间时无需任何修改，装入后再移动也不影响其正确执行。
    2. 同一进程的不同程序段可以装入到互不连续的内存空间，只要各程序段有自己对应的重定位寄存器。该优点有利于实现内存资源的充分利用和共享。

    缺点：
    1. 需要附加的硬件支持，系统开销大。
    2. 实现存储管理的软件较复杂。

### 内存分配方式
1. **最先适应算法**：也称**首次适应算法**。空闲区是按其首地址递增的顺序登记在空闲表中的，当要分配一个空闲区时，便在空闲区表中查找满足要求的空闲区，只要找到第一个足以满足要求的空闲区就停止查找。

2. **最佳适应算法**：空闲区是按照大小递增排序，即小块在前、大块在后。能达到将大小恰好满足的空闲区分配出去的效果。

3. **最坏适应算法**：是最佳适应算法的“逆”，空闲区是按其大小递减的顺序登记在空闲区表中，即大块在前、小块在后。

### 虚拟存储技术

#### 虚拟存储技术概念
有的系统运行时作业很多，内存无法一次将全部作业装入内存中，因而只能装少量的作业，其他大量的作业留在外存中等待。显然，为了解决这一问题，最好的方式是从物理上扩充内存的容量，但是这必然提高系统的成本，使用户无法接受；另一种方法是从逻辑上扩充内存的容量，这便是**虚拟存储技术**。

#### 页面置换算法（针对页式虚拟存储）
1. **最佳页面淘汰算法（OPTimal Replace Algorithm, OPT）**：这是一种**理论化**的算法，其选择的被淘汰页将是永不使用的页，或者是在随后很长时间内不再访问的页。

2. **先进先出淘汰算法（First-In First-Out, FIFO）**：总是先淘汰那些驻留在内存时间最长的页面，即先进入内存的页面先被置换掉。因为先进入内存的页面不再被访问的可能性最大。

3. **最近最不常用淘汰算法（Least Frequently Used, LFU）**：根据在一定时间里页面被使用的次数选择可以调出的页，如果一个页面被访问的次数多，则是经常要使用的页，就不应该把它调出。

4. **最近最久未用淘汰算法（Least Recently Used, LRU）**：如果某一页被访问了，那么它很可能马上又被访问，反之，如果某一页很久没有被访问了，那么它最近也不太可能被访问了。其实质是选择在最近一段时间最久未使用的页面予以淘汰。

## 第五章 文件管理

### 文件系统的功能
1. **文件组织**：文件组织提供了文件信息的组织结构。

2. **文件存储空间的管理**：由文件系统对文件存储空间进行统一管理，包括对文件存储空间使用情况的记载，实施存储空间的分配与回收，并为文件的信息与存放的物理位置建立映射关系，在存取文件时有效地确定文件的存放位置。

3. **文件共享与保护**：为不同的用户提供文件的共享，同时控制用户对共享文件的使用，包括不同用户对共享文件的访问权限和操作权限，记录共享某个文件的用户进程数目等。

4. **提供方便的接口**：文件管理主要向用户提供简便、统一的使用文件的界面。

### 文件的逻辑结构
1. **记录式文件（有结构）**：记录式文件是指逻辑上可被看成一组连续顺序的记录的集合。每个记录是一个有一定意义的信息集合，称为**逻辑记录**。

2. **流式文件**：流式文件又称为**无结构文件**，这种文件在逻辑上看做是一系列有意义的字符或字节按照一定顺序的集合。
