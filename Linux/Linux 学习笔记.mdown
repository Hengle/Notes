# Linux 学习笔记
## 磁盘分区
Linux 通过字母和数字的组合来标志硬盘分区：

- 前两个字母表示分区所在设备的类型，如 hd 表示 IDE 硬盘，sd 表示 SCSI/SATA/USB 硬盘

- 第三个字母表示分区在哪个设备上，如 hda 表示第一块 IDE 硬盘，hdb 表示第二块 IDE 硬盘，sdc 表示第三块 SCSI 硬盘

- 最后的数字表示分区的次序，如数字 1~4 表示主分区或扩展分区，逻辑分区从 5 开始

在一般情况下，Linux 需要两个必备的分区：**根文件系统分区（类型为 ext3，ext2 或 reiserfs）**和**交换分区（类型为 swap）**

## 简单命令
1. who

    `who`命令将列出所有正在使用系统的用户、所用终端名和注册到系统的时间

    而`who am i`命令将列出使用该命令的当前用户的相关信息

    ```shell
    cy-com@cycom:~/workspace$ who
    cy-com   :0           2016-05-06 19:25 (:0)
    cy-com   pts/7        2016-05-06 19:25 (:0)
    cy-com   pts/0        2016-05-06 19:28 (:0)
    cy-com@cycom:~/workspace$ who am i
    cy-com   pts/7        2016-05-06 19:25 (:0)
    ```

2. echo

    `echo`命令将命令行中的参数显示到标准输出（即屏幕）上

    ```shell
    cy-com@cycom:~/workspace$ echo hello    world!
    hello world!
    cy-com@cycom:~/workspace$ echo 'hello    world!'
    hello    world!
    ```

3. date

    `date`命令在屏幕上显示或设置系统的日期和时间

    默认显示当前日期和时间

    如果指定显示日期的格式，将按照指定的格式显示当前日期和时间

    ```shell
    cy-com@cycom:~/workspace$ date
    2016年 05月 06日 星期五 19:40:10 CST
    ```

4. cal

    `cal`命令显示公元 1~9999 年中任意一年或任意一个月的日历

    如果不加参数，则显示当前月份的日历

    ```shell
    cy-com@cycom:~/workspace$ cal
      五月 2016
    日 一 二 三 四 五 六
     1  2  3  4  5  6  7
     8  9 10 11 12 13 14
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31
    ```

    如果加一个参数，则该参数被解释为年份，而不是月份

    ```shell
    cy-com@cycom:~/workspace$ cal 2016
                                2016
             一月                    二月                    三月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2      1  2  3  4  5  6         1  2  3  4  5
     3  4  5  6  7  8  9   7  8  9 10 11 12 13   6  7  8  9 10 11 12
    10 11 12 13 14 15 16  14 15 16 17 18 19 20  13 14 15 16 17 18 19
    17 18 19 20 21 22 23  21 22 23 24 25 26 27  20 21 22 23 24 25 26
    24 25 26 27 28 29 30  28 29                 27 28 29 30 31
    31

             四月                    五月                    六月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2   1  2  3  4  5  6  7            1  2  3  4
     3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11
    10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18
    17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25
    24 25 26 27 28 29 30  29 30 31              26 27 28 29 30


             七月                    八月                    九月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2      1  2  3  4  5  6               1  2  3
     3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10
    10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17
    17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24
    24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30
    31

             十月                   十一月                   十二月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                       1         1  2  3  4  5               1  2  3
     2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10
     9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17
    16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24
    23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31
    30 31
    ```

    如果加两个参数，则第一个参数表示月份，第二个参数表示年份

    ```shell
    cy-com@cycom:~/workspace$ cal 5 2016
          五月 2016
    日 一 二 三 四 五 六
     1  2  3  4  5  6  7
     8  9 10 11 12 13 14
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31
    ```

5. clear

    `clear`命令清除屏幕上的信息

6. passwd

    `passwd`命令把原来的口令改为一个更安全的字符串

    ```shell
    cy-com@cycom:~/workspace$ passwd
    Changing password for cy-com.
    (current) UNIX password:
    Enter new UNIX password:
    Retype new UNIX password:
    ```

## 文件类型
### 普通文件
普通文件也称**常规文件**，包含各种长度的字符串。

它又包括以下几个类型：

1. 文本文件：它由 ASCII 字符构成。例如，新建、报告和脚本

2. 数据文件：它由来自应用程序的数字型和文本型数据构成。例如，电子表格、数据库及字处理文档

3. 可执行的二进制程序文件：它由机器指令和数据构成

可以使用`file`命令来确定指定文件的类型，该命令格式为：

```shell
file 文件名 [文件名...]
```

```shell
cy-com@cycom:~/workspace$ file demo.txt
demo.txt: ASCII text
```

### 目录文件
目录文件是一种特殊的文件，利用它可以构成文件系统的分层树形结构。如普通文件一样，目录文件也包含数据，但目录文件与普通文件的差别是：**核心对这些数据进行结构化处理，即它是由成对的“I 节点号/文件名”构成的列表**：

1. **I 节点号**是检索 I 节点表的下表，I 节点中存放有文件的状态信息

2. **文件名**是给一个文件分配的文本形式的字符串，用来标记该文件。**在一个指定的目录中，任何两项都不能有同样的名字**

### 设备文件
设备文件是一种特别的文件，除了在其文件 I 节点中存放属性信息外，它们不包含任何数据。系统利用它们来标记各个设备驱动器，核心使用它们与硬件设备通讯。

有两类特别设备文件，它们对应不同类型的设备驱动器：

1. **字符设备**。最常用的设备类型，允许 I/O 传送任意大小的数据，取决于设备本身的容量。使用这种接口的设备包括终端、打印机及鼠标

2. **块设备**。这类设备利用核心缓冲区的自动缓存机制。缓冲区进行 I/O 传送总是以 KB 为单位。使用这种接口的设备包括硬盘、软盘和 RAM 盘

### 符号链接文件
**符号链接文件**是一种特殊文件，提供对其他文件的**参照**。它们存放的数据是文件系统通向文件的路径。当使用符号链接文件时，核心自动访问所保存的这个路径。

## 文件操作命令
### 文件显示命令
1. cat

    `cat`命令**连接文件**并打印到标准输出设备上

    1. 一般格式

    ```shell
    cat [选项] 文件
    ```

    2. 说明

        该命令有两项功能，一是显示文件的内容，它依次读取由参数 file 所指明的文件，将他们的内容输出到标准输出上；二是连接两个或多个文件，如`cat f1 f2 > f3`将把文件 f1 和 f2 的内容合并起来，然后通过输出重定向符`>`的作用，将它们放入文件 f3 中

    3. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-b, --number-noblank|从 1 开始对所有非空输出行编号|
    |-n, --number|从 1 开始对所有输出行编号|
    |-s, --squeeze-blank|将多个相邻的空行合并成一个空行|
    |--help|打印该命令用法，并退出，其返回码表示成功|

    4. 示例

    ```shell
    [15:28:52] yrh:shell_ws $ cat f1
    a
    b
    c
    e
    [15:29:26] yrh:shell_ws $ cat f2
    e
    f
    g
    h
    [15:29:32] yrh:shell_ws $ cat f1 f2
    a
    b
    c
    e
    e
    f
    g
    h
    [15:29:59] yrh:shell_ws $ cat f1 f2 > f3
    [15:30:04] yrh:shell_ws $ cat f3
    a
    b
    c
    e
    e
    f
    g
    h
    ```

2. more

    `more`命令显示文件内容，每次显示一屏

    1. 一般格式

    ```shell
    more [选项] 文件
    ```

    2. 说明

        该命令一次显示一屏文本，满屏后停下来，并且在屏幕底部出现一个提示信息，给出至今已显示的该文件的百分比：`---More---(xx%)`

        可以用下列不同的方法对提示做出回答：
        - 按 Space 键，显示文本的下一屏内容
        - 按 Enter 键，只显示文本的下一行内容
        - 按斜线符（/），接着输入一个模式，可以在文本中寻找下一个相匹配的模式
        - 按 H 键，显示帮助屏，该屏上有相关的帮助信息
        - 按 B 键，显示上一屏内容
        - 按 Q 键，退出 more 命令

    3. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-num|指定一个整数，表示一屏显示多少行|
    |-d|在每屏的底部显示更友好的提示信息|
    |-c或-p|不滚屏，在显示下一屏之前先清屏|
    |-s|将文件中连续的空白行压缩成一个空白行显示|
    |+/|该选项后的模式（pattern）指定显示每个文件之前进行搜索的字符串|
    |+num|从行号 num 开始|

    4. 示例
    ```shell
    # 显示文件 mfile 内容，在现实之前先清屏，并在屏幕下方显示完整的百分比
    [15:46:10] yrh:shell_ws $ more -dc mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    ...
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    --More--(11%)[Press space to continue, 'q' to quit.]
    # 显示文件 mfile 内容，每 10 行显示一次，而且在显示之前先清屏
    [15:47:33] yrh:shell_ws $ more -c -10 mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    --More--(4%)
    ```

3. less

    `less`与`more`命令一样，也用来分屏显示文件内容。但是二者的差别在于：`less`允许用户向前或向后浏览文件，而`more`只能向前浏览。

    用`less`命令显示文件时，用 PageUp 键向上翻页，用 PageDown 键向下翻页。要退出程序，应按 Q 键

4. head

    `head`命令在屏幕上显示指定文件的开头若干行

    1. 一般格式

    ```shell
    head [选项] file
    ```

    2. 说明

        `head`命令在屏幕上显示指定文件的开头若干行，行数由参数值来确定。显示行数的默认值是 10

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--bytes=[-]N|显示每个文件前面 N 字节。<br>如果数字 N 前面带有“-”，则分别显示每个文件除最后 N 字节外的所有内容|
    |-n,--lines=[-]N|显示指定文件的前面 N 行，而不是默认的 10 行<br>如果数字 N 前面带有“-”，则分别显示每个文件除最后N 行以外的所有内容|
    |-q,-quiet,--silent|不显示给定文件的标题|
    |-v,--verbose|始终显示给定文件的标题|

    4. 示例

    ```shell
    cy-com@cycom:~/workspace$ head -5 mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    cy-com@cycom:~/workspace$ head -v mfile
    ==> mfile <==
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    cy-com@cycom:~/workspace$ head -q mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    ```

5. tail

    `tail`命令在屏幕上显示指定文件的末尾若干行

    1. 一般格式

    ```shell
    tail [选项] [file]...
    ```

    2. 说明

        `tail`命令在屏幕上显示指定文件的末尾 10 行，如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或文件名为“-”，则读取标准输入

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--bytes=N|输出最后 N 个字节|
    |-f|当文件增长时输出附加的数据|
    |-n,--lines=N|输出最后 N 行，而不是默认的 10 行|
    |-q,-quiet,--silent|不输出包含给定文件名的标题|
    |-v,--verbose|始终输出包含给定文件名的标题|

    4. 注意

        如果表示字节或行数的 N 值之前有一个“+”，则从文件开头的第 N 项开始显示，而不是显示文件的最后 N 项。N 值后面可以有后缀：b 表示 512，k 表示 1024，m 表示 1 048 576（1M）

    5. 示例

    ```shell
    cy-com@cycom:~/workspace$ tail mfile1
       192  abcdefghijklmnopqrstuvwxyz
       193  abcdefghijklmnopqrstuvwxyz
       194  abcdefghijklmnopqrstuvwxyz
       195  abcdefghijklmnopqrstuvwxyz
       196  abcdefghijklmnopqrstuvwxyz
       197  abcdefghijklmnopqrstuvwxyz
       198  abcdefghijklmnopqrstuvwxyz
       199  abcdefghijklmnopqrstuvwxyz
       200  abcdefghijklmnopqrstuvwxyz
       201  abcdefghijklmnopqrstuvwxyz
    cy-com@cycom:~/workspace$ tail -c 10 mfile1
    rstuvwxyz
    ```

6. touch

    `touch`命令可以修改指定文件的**时间标签**或者**创建一个空文件**

    1. 一般格式

    ```shell
    touch [选项] 文件名...
    ```

    2. 说明

        `touch`命令将会修改指定文件的时间标签，把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来。如果该文件尚未存在，则建立一个空的新文件

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-a|仅改变指定文件的存取时间|
    |-c,--no-create|不创建任何文件|
    |-m|仅改变指定文件的修改时间|
    |-t STAMP|使用 STAMP 指定的时间标签，而不是系统当前的时间|

    4. 示例

    ```shell
    cy-com@cycom:~/workspace$ touch demo.txt
    cy-com@cycom:~/workspace$ ls
    demo.txt
    ```

### 匹配、排序及显示指定内容的命令
1. grep

    该命令在**文本文件**中查找指定模式的词或短语，并在标准输出设备上显示包括给定字符串模式的所有行。该命令组包含三个命令：`grep`、`egrep`和`fgrep`命令。`grep`命令一次只能搜索一个指定的模式；`egrep`命令等同于`grep -E`，可以使用扩展的字符串模式进行搜索；`fgrep`命令等同于`grep -F`，是快速搜索命令，它检索固定字符串，但不识别正则表达式

    1. 一般格式

    ```shell
    grep [选项] 查找模式 [文件名1，文件名2，...]
    grep [选项] [-e 查找模式|-f 文件] [文件名1，文件名2，...]
    ```

    2. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-E|将查找模式解释成扩展的正则表达式|
    |-F|将查找模式解释成单纯的字符串|
    |-b,--byte-offset|在输出的每一行显示包含匹配字符串的行在文件中的位置<br>用字节偏移量表示|
    |-c,--count|只显示文件中包含匹配字符串的行的总数|
    |-f FILE|从文件 FILE 中获取模式，每行一个<br>空文件不含模式，因此不做匹配|
    |-i,--ignore-case|匹配比较时不区分字母的大小写|
    |-R,-r,--recursive|以递归方式查询目录下的所有子目录中的文件|
    |-n|在输出包含匹配模式的行之前，加上该行的行号|
    |-v|只显示不包含匹配字符串的文本行|
    |-x|只显示整个行都严格匹配的行|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    ghi
    jkl
    mno
    pqrst
    uvwx
    yz
    cy-com@cycom:~/workspace$ grep -En 'k' mfile
    4:jkl
    cy-com@cycom:~/workspace$ grep -i 'K' mfile
    jkl
    ```

2. sort

    `sort`命令对文本文件的各行进行排序

    1. 一般格式

    ```shell
    sort [选项] 文件列表
    ```

    2. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-m,--merge|对已经排好序的文件统一进行合并，但不做排序|
    |-c,--check|检查给定的文件是否已排好序，若没有，则显示出错信息，不排序|
    |-u,--unique|与 -c 选项一起用，严格地按顺序检查；否则，堆排序后的重复行只输出第一行|
    |-o,--ouput=FILE|将排序输出放到该文件名所指定的文件 FILE 中。<br>如果该文件不存在，则创建一个新文件|
    |-d,--dictionary-order|按字典顺序排序，比较时仅考虑空白符和字母数字|
    |-f,--ignore-case|忽略字母的大小写|
    |-i,--ignore-nonprinting|忽略非打印字符|
    |-M,--month-sort|规定月份的比较次序|
    |-r,reverse|按逆序排序。默认排序输出是按升序排序的|
    |-k,--key=n1[, n2]|指定从文本行的第 n1 字段开始至第 n2 字段的内容作为排序关键字|
    |-b|比较关键字时忽略前导的空白符（空格或制表符）|
    |-t 字符|将指定“字符”作为字段间的分隔符|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    ghi
    jkl
    mno
    pqrst
    uvwx
    yz
    cy-com@cycom:~/workspace$ sort -r mfile
    yz
    uvwx
    pqrst
    mno
    jkl
    ghi
    def
    abc
    ```

3. uniq

    `uniq`命令从排好序的文件中**去除重复行**

    1. 一般格式

    ```shell
    uniq [选项] [输入文件 [输出文件]]
    ```

    2. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--count|显示输出时，在每行的行首加上该行在文件中出现的次数|
    |-d,--repeated|只显示重复行|
    |-f,--skip-fields=N|忽略比较前 N 个字段|
    |-s,--skip-chars=N|忽略比较前 N 个字符|
    |-u,--unique|只显示文件中不重复的行|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    jkl
    mno
    mno
    mno
    uvwx
    yz
    cy-com@cycom:~/workspace$ uniq mfile
    abc
    def
    jkl
    mno
    uvwx
    yz
    ```

### 文件内容统计命令
`wc`命令统计指定文件的字节数、字数、行数，并将统计结果显示出来

1. 一般格式

```shell
wc [选项] [文件]...
```

2. 说明

    `wc`输出列的顺序和数目不受选项顺序和数目的影响，总是按以下格式显示，并且每项只占一列：

    ```
    行数  字数  字节数 文件名
    ```

3. 常用选项

|选项|作用|
|:---:|:---:|
|-c,--bytes|统计字节数|
|-l,--lines|统计行数|
|-w,--words|统计字数|

4. 示例

```shell
cy-com@cycom:~/workspace$ cat mfile
abc
def
jkl
mno
mno
mno
uvwx
yz
cy-com@cycom:~/workspace$ wc -lcw mfile
 8  8 32 mfile
```

## 执行 Shell 脚本的方式
1. 输入定向到 shell 脚本

    该方式用输入重定向方式让 shell 从给定文件中读入命令行，并进行相应处理

    ```
    cy-com@cycom:~/workspace$ cat ex1
    date
    cy-com@cycom:~/workspace$ bash < ex1
    2016年 05月 16日 星期一 17:29:31 CST
    ```

2. 以脚本名作为 bash 参数

    一般形式为`bash 脚本名 [参数]`

    ```shell
    cy-com@cycom:~/workspace$ bash ex1
    2016年 05月 16日 星期一 17:31:48 CST
    ```

3. 将 shell 脚本的权限设置为可执行，然后在提示符下直接执行

    ```shell
    cy-com@cycom:~/workspace$ chmod a+x ex1
    cy-com@cycom:~/workspace$ ./ex1
    2016年 05月 16日 星期一 17:33:17 CST
    ```

## 命令历史
### 显示历史命令
`history`命令显示命令历史表中的命令，其语法格式为：

```shell
history [option] [arg...]
```

1. 如果不带任何参数，则`history`命令会显示历史命令清单（包括刚输入的`history`命令）

```shell
[19:10:59] yrh:shell_ws $ history
  1 ls
  ...
  438  sudo apt-get autoremove
  439* exit
  440  ls
  441  clear
  442  ls
  443  cd workspace
  444  cd Notes
  445  git pull
  446  clear
  447  cd
  448  ls
  449  cd workspace
  450  ls
  451  cd shell_ws
```

所有这些命令都被称为**事件**。事件表示一个操作已经发生，即命令已被执行。显示的各行命令之前的数字表示相应命令行在命令历史表中的序号，称为**历史事件号**。历史事件号从 1 开始顺序往下排，最后执行的命令的事件号最大

2. 如果`history`命令后给出一个正整数，则显示历史表中的前正整数条命令

```shell
[19:15:46] yrh:shell_ws $ history 10
    1  zsh --version
    2  git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    3  cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
    4  ls ~/.oh-my-zsh/themes
    5  sudo vi ~/.zshrc
    6  chsh -s /bin/zsh
    7  vi /etc/bash.bashrc
    8  vi ~/.zshrc
    9  vi ~/.zshrc
   10  source ~/.zshrc
```

3. 如果`history`后给出一个命令名，则显示到这个命令最后出现的位置

```bash
[19:10:59] yrh:shell_ws $ history ls
  1 ls
  ...
  438  sudo apt-get autoremove
  439* exit
  440  ls
  441  clear
  442  ls
  443  cd workspace
  444  cd Notes
  445  git pull
  446  clear
  447  cd
  448  ls
  449  cd workspace
  450  ls
```

4. 常见的选项
|选项|作用|
|:---:|:---:|
|-a|在历史文件中添加“新”历史命令行|
|-n|从历史文件中读取尚未读入的历史命令行，添加到当前历史清单中|
|-r|读取历史文件的内容，并把它作为当前历史命令|
|-w|把当前的历史写道历史文件中，覆盖原有内容|
|-c|删除历史清单中所有的项|

### 执行历史命令
执行历史命令是命令替换方式之一，它以字符`!`开头，后随一个或多个字符来定义用户所需的某种类型的历史命令。

历史替换可以作为输入的命令行的一部分或全部。当输入行的正文中包含历史替换时，将在完成相应的替换后，在终端上显示输入的命令行，使用户看到实际执行的命令（显示命令后立即执行）。

下表列出了基本事件指定字格式及其意义，利用它们可以访问历史表中的命令行

|格式|意义|
|:---|:---|
|!!|重复上一条命令，也就是“!-1”|
|!n|重新执行第 n 条历史命令|
|!-n|重新执行倒数第 n 条历史命令。如 !-1 就等于 !!|
|!string|重新执行以字符串 string 开头的最近的历史命令行。<br>例如，!ca 表示访问前面最近的 cat 命令|
|!?string?|重新执行最近的、其中包含字符串 string 的那条历史命令。<br>例如，!?hist? 表示重复前面的含有 hist 的命令|
|!#|到现在为止所输入的整个命令行|

示例：

```bash
[19:32:59] yrh:shell_ws $ ls
f1  f2  f3  history.txt  mfile
[19:32:59] yrh:shell_ws $ date
2016年 05月 16日 星期一 19:33:00 CST
[19:33:00] yrh:shell_ws $ who
yrh      pts/1        2016-05-16 15:04 (192.168.6.1)
[19:33:01] yrh:shell_ws $ !!
[19:33:02] yrh:shell_ws $ who
yrh      pts/1        2016-05-16 15:04 (192.168.6.1)
[19:33:02] yrh:shell_ws $ !-1
[19:33:04] yrh:shell_ws $ who
yrh      pts/1        2016-05-16 15:04 (192.168.6.1)
[19:33:05] yrh:shell_ws $ !dat
[19:33:15] yrh:shell_ws $ date
2016年 05月 16日 星期一 19:33:15 CST
[19:33:15] yrh:shell_ws $ !?l?
[19:33:25] yrh:shell_ws $ ls
f1  f2  f3  history.txt  mfile
```

### 配置历史命令环境
在默认方式下，bash 使用用户主目录下的文件`.bash_history`来保存命令历史

可以通过重新为环境变量`HISTFILE`赋值来改变存放历史命令的文件

```shell
[19:37:10] yrh:shell_ws $ HISTFILE="~/.myhistory"
```

历史文件中能够保留的命令个数有限，其默认值是 500，可以通过对环境变量`HISTSIZE`赋值来改变最大保存数量

*注：不同的终端存放命令历史的文件也会有所不同，如在 zsh 中，命令历史存放在 ~/.zsh_history 中*

## Shell 特殊字符
### 通配符
#### 1. 一般通配符
1. *（星号）

    匹配任意字符的 **0 次或多次出现**

    例如：f* 可以匹配 f, fa, fb, faa, ffa.abc 等，即匹配以 f 打头的任意字符串

    但应该注意的是，文件名前面的圆点（.）和路径名中的斜线（/）必须显示匹配，即模式 \*file 不能匹配 .profile，而 .\*file 可以匹配

2. ?（问号）

    匹配一个任意字符

    例如：f? 可以匹配 f1, fa, fb 等，但不能匹配 faa, fabc 等

3. [字符组]

    匹配该字符组所限定的任何一个字符

    例如：f[abcd] 可以匹配 fa, fb, fc 和 fd，但不能匹配 f1, fa1 等

    同时 [abcd] 可以简写为 [a-d]，[123456789] 可以简写为 [1-9]

4. !（惊叹号）

    如果它紧跟在一对方括号的左括号（[）之后，表示不在一对方括号中所列出的字符

    例如：f[!abcd] 可以匹配 fe, f1, f2 等，但不能匹配 fa, fb, fc 和 fd

#### 2. 模式表达式
1. *(模式表)

    匹配给定模式表中的 **0 次或多次**出现的“模式”，各模式之间以“|”分开

    例如：file*(.c | .o) 将匹配文件 file, file.c, file.o, file.c.c, file.o.o, file.c.o 等，但不能匹配 file.h 或 file.s 等

2. +(模式表)

    匹配给定模式表中**一次或多次**出现的“模式”，各模式之间以“|”分开

    例如：file+(.c | .o) 将匹配 file.c, file.o, file.c.c, file.o.o, file.c.o 等，但不能匹配 file, file.h 或 file.s 等

3. ?(模式表)

    匹配模式表中任何一种 **0 次或 1 次**出现的“模式”，各模式之间以“|”分开

    例如：file?(.c | .o) 将匹配 file, file.c, file.o，但不能匹配 file.c.c, file.o.o 或 file.h 等

4. @(模式表)

    仅匹配模式表中给定**一次**出现的“模式”，各模式之间以“|”分开

    例如：file@(.c | .o) 将匹配 file.c 和 file.o 其他都不匹配

5. !(模式表)

    匹配除给定“模式”外一切形式

    例如：file!(.c | .o) 仅仅不匹配 file.c 和 file.o

### 引号
#### 1. 双引号（"）
由双引号（""）括起来的字符（除 '$'、'`'、'\' 外）均作为**普通字符**对待

注：
- '$' 表示变量替换，即用预先指定的变量值代替`$`和变量

- '`' 表示命令替换

- '\' 表示转义字符

```shell
[20:10:27] yrh:shell_ws $ cat ex1
echo "current directory is `pwd`"
echo "home directory is $HOME"
echo "file*.?"
echo "directory '$HOME'"
[20:10:29] yrh:shell_ws $ ./ex1
current directory is /home/yrh/workspace/shell_ws
home directory is /home/yrh
file*.?
directory '/home/yrh'
```

#### 2. 单引号（'）
由单引号括起来的字符都作为**普通字符**出现

```shell
[20:10:37] yrh:shell_ws $ str='echo "directory is   $HOME"'
[20:14:11] yrh:shell_ws $ echo $str
echo "directory is   $HOME"
[20:14:19] yrh:shell_ws $ echo 'The time is `date`, the file is $HOME/abc'
The time is `date`, the file is $HOME/abc
```

#### 3. 倒引号（`）
倒引号括起来的字符串被 shell 解释为命令行，在执行时，shell 会先执行该命令行，并以它的标准输出结果取代整个倒引号部分

```shell
[20:15:08] yrh:shell_ws $ echo current directory is `pwd`
current directory is /home/yrh/workspace/shell_ws
[20:16:47] yrh:shell_ws $ echo The time is `date`
The time is 2016年 05月 16日 星期一 20:16:55 CST
[20:17:52] yrh:shell_ws $ today=`date`
[20:18:30] yrh:shell_ws $ echo Today is $today
Today is 2016年 05月 16日 星期一 20:18:30 CST
[20:18:37] yrh:shell_ws $ users_count=`who | wc -l`
[20:19:14] yrh:shell_ws $ echo The number of users is $users_count
The number of users is 1
```

### 输入/输出重定向符
#### 1. 输入重定向符
输入重定向符`<`的作用是，把命令（或可执行程序）的标准输入重新定向到指定文件

一般形式为：

```shell
命令 < 文件名
```

示例：

```shell
[20:23:12] yrh:shell_ws $
[20:23:16] yrh:shell_ws $ cat f1
a
b
c
e
[20:22:59] yrh:shell_ws $ s="f1"
[20:23:06] yrh:shell_ws $ cat < $s
a
b
c
e
```

#### 2. 输出重定向符
输出重定向符`>`的作用是，把命令（或可执行程序）的标准输出重新定向到指定文件

一般形式为：

```shell
命令 > 文件名
```

示例：

```shell
[20:24:51] yrh:shell_ws $ cat ls_output
[20:24:54] yrh:shell_ws $ ls
ex1  f1  f2  f3  history.txt  ls_output  mfile
[20:24:55] yrh:shell_ws $ ls > ls_output
[20:24:59] yrh:shell_ws $ cat ls_output
ex1
f1
f2
f3
history.txt
ls_output
mfile
```

#### 3. 输出附加定向符
输出附加定向符`>>`的作用是，把命令（或可执行程序）的输出附加到指定文件的后面，而该文件原有内容不被破坏

一般形式为：

```shell
命令 >> 文件名
```

示例：

```shell
[20:25:07] yrh:shell_ws $ cat f1
a
b
c
e
[20:27:39] yrh:shell_ws $ ls >> f1
[20:27:43] yrh:shell_ws $ cat f1
a
b
c
e
ex1
f1
f2
f3
history.txt
ls_output
mfile
```

#### 4. 即时文件定向符
即时文件（here document）由重新定向符`<<`、一对标记符以及若干输入行组成

它允许把 shell 程序的输入行重新定向到一个命令，其一般形式为：

```shell
命令 [参数] << 标记符
    输入行
    ...
标记符
```

示例：

```shell
[20:27:48] yrh:shell_ws $ wc -l << @@
heredoc> a
heredoc> b
heredoc> c
heredoc> d
heredoc> e
heredoc> @@
5
```

#### 5. 与文件描述字有关的重定向
在 UNIX/Linux 系统中，每一个“打开”的文件都有系统赋予的一个文件描述字，它是一个小整数

系统为每个进程自动打开三个标准文件（即**标准输入**、**标准输出**和**错误输出**），其文件描述字分别为0, 1 和 2

示例：

```shell
[20:35:27] yrh:shell_ws $ cat ls_output
[20:35:31] yrh:shell_ws $ ls 1>ls_output
[20:35:36] yrh:shell_ws $ cat ls_output
ex1
f1
f2
f3
history.txt
ls_output
mfile
```

标准输出和标准错误输出可以重定向到同一个文件，一般形式是`command $>file`，其功能是把命令`command`的标准输出和标准错误输出都放入同一个文件 file 中

### 注释、管道线和后台命令
#### 1. 注释
以`#`开头的正文行表示注释

#### 2. 管道线
在 UNIX/Linux 系统中，管道线是由`|`隔开的若干命令组成的序列

在管道线中，每个命令执行时都有一个独立的进程。前一个命令的输出正是下一个命令的输入

示例：

```shell
[20:35:45] yrh:shell_ws $ ls | wc -l
7
```

#### 3. 后台命令
在一条命令的最后输入`&`符，可以在后台启动该程序

### 成组命令
#### 1. {}形式
以`{}`括起来的全部命令可视为语法上的一条命令，出现在管道符的一边。成组命令的执行顺序是根据命令出现的先后次序，由左至右执行

示例：

```shell
[20:45:55] yrh:shell_ws $ { echo Date: `date`; ls; }
Date: 2016年 05月 16日 星期一 20:46:15 CST
ex1  f1  f2  f3  history.txt  ls_output  mfile
```

#### 2. ()形式
这种形式的成组命令的执行过程与用`{}`括起来的形式相同

但是，二者存在重要区别：用`{}`括起来的成组命令只在本 shell 内执行命令表，不产生新的进程；而用`()`括起来的成组命令是在新的子 shell 内执行，要建立新的子进程。因此，在`()`内的命令不会改变父 shell 的变量值及工作目录等

示例：

```shell
[20:46:20] yrh:shell_ws $ a="a"
[20:48:57] yrh:shell_ws $ echo $a
a
[20:49:00] yrh:shell_ws $ (a="b"; echo $a)
b
[20:49:11] yrh:shell_ws $ echo $a
a
[20:49:18] yrh:shell_ws $ {a="b"; echo $a}
b
[20:49:29] yrh:shell_ws $ echo $a
b
```

## shell 变量
### 用户定义的变量
变量名是以字母或下划线打头的字母、数字和下划线序列，区分大小写

变量通过`=`进行赋值

使用变量的值时，要在变量名前面加上一个`$`符

示例：

```shell
[20:59:08] yrh:shell_ws $ today=Monday
[21:00:55] yrh:shell_ws $ echo $today
Monday
[21:02:50] yrh:shell_ws $ dir="/usr/bin"
[21:02:59] yrh:shell_ws $ echo $dir
/usr/bin
[21:03:01] yrh:shell_ws $ echo ${dir}/env
/usr/bin/env
```

有两种形式可以将**一个命令的执行结果**赋值给变量

一种形式是

```shell
var=`command`
```

另一种形式是

```shell
var=$(command)
```

示例：

```shell
[21:06:01] yrh:shell_ws $ p=`pwd`
[21:06:20] yrh:shell_ws $ echo $p
/home/yrh/workspace/shell_ws
[21:06:22] yrh:shell_ws $ p=$(pwd)
[21:06:26] yrh:shell_ws $ echo $p
/home/yrh/workspace/shell_ws
```

### 数组
声明数组有两种方式：

```shell
city[0]=Beijing
city[1]=Shanghai

declare -a city
```

读取数组元素值的一般格式是

```shell
${数组名[下标]}
```

使用`*`或`@`作为下标，则会以数组中所有元素取代[*]或[@]：

```shell
[21:10:27] yrh:shell_ws $ c[1]=a
[21:11:07] yrh:shell_ws $ c[2]=b
[21:11:09] yrh:shell_ws $ c[3]=c
[21:11:11] yrh:shell_ws $ echo $c[*]
a b c
[21:11:17] yrh:shell_ws $ echo $c[@]
a b c
[21:11:20] yrh:shell_ws $ echo $c
a b c
```

利用`unset`命令可以取消一个数组的定义：`unset 数组名`

### 变量引用
有效的变量引用表达式有以下这些形式：

```shell
$name               ${name}             ${name[n]}          ${name[*]}
$name[@]            ${name:-word}       ${name:=word}       ${name:?word}
${name:+word}       ${name#pattern}     ${name##pattern}    ${name%pattern}
${name%%pattern}    ${#@}               ${$#*}              ${#name}
${#name[*]}         ${#name[@]}
```

### 输入/输出命令
1. read

    可以利用`read`命令从键盘上读取数据，然后赋给指定的变量

    一般形式为：

    ```shell
    read 变量1 [变量2 ...]
    ```

    示例：

    ```shell
    [21:22:58] yrh:shell_ws $ read a
    hello
    [21:23:02] yrh:shell_ws $ echo $a
    hello
    ```

    利用`read`命令可交互式地为变量赋值。输入数据时，数据间以空格或制表符作为分隔符。

    变量的个数和数据个数之间可出现下述三种情况

    1. 变量个数与给定数据个数相同，则依次对应赋值

    ```shell
    [21:23:19] yrh:shell_ws $ read x y z
    Hello World !
    [21:25:17] yrh:shell_ws $ echo $z $y $x
    ! World Hello
    ```

    2. 变量个数少于数据个数，则从左至右对应赋值，但最后一个变量被赋予剩余的所有数据

    ```shell
    [21:25:31] yrh:shell_ws $ read x y z
    a b c d e f g
    [21:26:43] yrh:shell_ws $ echo $x $y
    a b
    [21:26:49] yrh:shell_ws $ echo $z
    c d e f g
    ```

    3. 变量个数多于给定数据个数，则依次对应赋值，而没有数据与之对应的变量取空串

    ```shell
    [21:27:01] yrh:shell_ws $ read x y z
    Hello World
    [21:28:05] yrh:shell_ws $ echo $x $y
    Hello World
    [21:28:09] yrh:shell_ws $ echo $z
    ```

2. echo

    `echo`命令显示其后的变量值，或者直接显示它后面的字符串

    如果`echo`命令带有选项`-e`，那么在其后的参数中可以有以下转义字符，用于输出控制或打印无法显示的字符：

    |转义字符|作用|
    |:---|:---|
    |\a|响铃警报|
    |\b|退一个字符位置|
    |\c|它出现在参数的最后位置。在它之前的参数被显示后，光标不换行，<br>新的输出信息接在该行的后面，与`echo -n xxx`功能相同|
    |\e|转义字符|
    |\f|换页|
    |\n|显示换行|
    |\r|回车|
    |\t|水平制表符|
    |\v|垂直制表符|
    |\\\\|打印反斜线本身|
    |\m|m 是一个 1 位，2 位 或 3 位八进制数，表示一个 ASCII 码字符，m 必须以 0 开头|
    |\xm|m 是一个 1 位，2 位 或 3 位十六进制数，表示一个 ASCII 码字符|

### 位置参数
执行 UNIX/Linux 命令或 shell 脚本时可以带有实参。相应地，在 shell 脚本中应有变量。执行 shell 程序时，用实参来替代这些变量。在 shell 脚本中这类变量的名称很特别，分别为 0, 1, 2, ...，因此称这类变量为**位置变量**，因为它们与命令行上具体位置的实参相对应：命令名（脚本名）对应位置变量 0，第一个实参对应位置变量 1，第二个实参对应位置变量 2 ...

这种变量不能直接赋值，它们的值只能通过命令行上对应位置的实参传值。引用它们的方式依次是 $0, $1, $2 ...

在 shell 程序中可以利用`set`命令为位置参数赋值或重新赋值。例如：`set a b c`把"a", "b", "c"分别赋值给 $1, $2, $3，但 $0 不能用`set`命令赋值，它的值总是命令名

在 shell 程序中可以利用`shift`命令来移动位置参数，每执行一次`shift`命令，就把命令行上的实参向左移动一位，即相当于位置参数向右移动一个位置

`shift`命令不能将 $0 移走，所以经`shift`右移位置参数后，$0 的值不会发生变化

`shift`命令可以带一个整数作为参数，例如，`shitf 3`的功能是，每次把位置参数右移 3 位

### 预先定义的特殊变量
1. `$#` 表示命令行上参数的个数，但不包含 shell 脚本名本身

2. `$?` 表示上一条命令执行后的返回值

3. `$$` 表示当前进程的进程号

4. `$!` 表示上一个后台命令对应的进程号，是一个由 1~5 位数字构成的数字串

5. `$-` 是由当前 shell 设置的执行标志名组成的字符串

6. `$*` 表示在命令行中实际给出的所有实参字符串

7. `$@` 它与`$*`功能基本相同，表示在命令行中给出的所有实参，`$*`会将所有实参组成一个字符串，`$@`是由每个实参组成的数组，因此`$@`更适合遍历

### 环境变量
#### 常用的环境变量
- HOME：用户主目录的全路径名

- LOGNAME：注册名，由 Linux 自动设置

- MAIL：系统信箱的路径

- PATH：shell 从中查找命令的目录列表。PATH 变量包含带冒号分解符的字符串，这些字符串指向含有用户所使用命令的目录，用户可以设置它

- PS1：shell 主提示符

- PWD：当前工作目录的路径

- SHELL：当前使用的 shell

- TERM：终端类型

## 算数运算
bash 中执行整数运算的命令是`let`，其语法格式为：

```shell
let arg ...
```

其中，arg 是单独的算术表达式，其使用 C 语言中表达式的语法、优先级和结合性。所有整形运算符都支持，且还提供方幂运算符`**`

`let`命令的替代形式是

```shell
((算术表达式))
```

示例：

```shell
let "j=i*6+2"

((j=i*6+2))
```

当`let`命令计算表达式的值时，若最后结果不为 0，则`let`命令返回值为 0，表示“真”；否则返回值为 1，表示“假”.这样，`let`命令可用于`if`语句的条件测试。

## 控制结构