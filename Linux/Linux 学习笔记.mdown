# Linux 学习笔记
## 磁盘分区
Linux 通过字母和数字的组合来标志硬盘分区：

- 前两个字母表示分区所在设备的类型，如 hd 表示 IDE 硬盘，sd 表示 SCSI/SATA/USB 硬盘

- 第三个字母表示分区在哪个设备上，如 hda 表示第一块 IDE 硬盘，hdb 表示第二块 IDE 硬盘，sdc 表示第三块 SCSI 硬盘

- 最后的数字表示分区的次序，如数字 1~4 表示主分区或扩展分区，逻辑分区从 5 开始

在一般情况下，Linux 需要两个必备的分区：**根文件系统分区（类型为 ext3，ext2 或 reiserfs）**和**交换分区（类型为 swap）**

## 简单命令
1. who

    `who`命令将列出所有正在使用系统的用户、所用终端名和注册到系统的时间

    而`who am i`命令将列出使用该命令的当前用户的相关信息

    ```shell
    cy-com@cycom:~/workspace$ who
    cy-com   :0           2016-05-06 19:25 (:0)
    cy-com   pts/7        2016-05-06 19:25 (:0)
    cy-com   pts/0        2016-05-06 19:28 (:0)

    cy-com@cycom:~/workspace$ who am i
    cy-com   pts/7        2016-05-06 19:25 (:0)
    ```

2. echo

    `echo`命令将命令行中的参数显示到标准输出（即屏幕）上

    ```shell
    cy-com@cycom:~/workspace$ echo hello    world!
    hello world!
    cy-com@cycom:~/workspace$ echo 'hello    world!'
    hello    world!
    ```

3. date

    `date`命令在屏幕上显示或设置系统的日期和时间

    默认显示当前日期和时间

    如果指定显示日期的格式，将按照指定的格式显示当前日期和时间

    ```shell
    cy-com@cycom:~/workspace$ date
    2016年 05月 06日 星期五 19:40:10 CST
    ```

4. cal

    `cal`命令显示公元 1~9999 年中任意一年或任意一个月的日历

    如果不加参数，则显示当前月份的日历

    ```shell
    cy-com@cycom:~/workspace$ cal
      五月 2016
    日 一 二 三 四 五 六
     1  2  3  4  5  6  7
     8  9 10 11 12 13 14
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31

    ```

    如果加一个参数，则该参数被解释为年份，而不是月份

    ```shell
    cy-com@cycom:~/workspace$ cal 2016
                                2016
             一月                    二月                    三月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2      1  2  3  4  5  6         1  2  3  4  5
     3  4  5  6  7  8  9   7  8  9 10 11 12 13   6  7  8  9 10 11 12
    10 11 12 13 14 15 16  14 15 16 17 18 19 20  13 14 15 16 17 18 19
    17 18 19 20 21 22 23  21 22 23 24 25 26 27  20 21 22 23 24 25 26
    24 25 26 27 28 29 30  28 29                 27 28 29 30 31
    31

             四月                    五月                    六月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2   1  2  3  4  5  6  7            1  2  3  4
     3  4  5  6  7  8  9   8  9 10 11 12 13 14   5  6  7  8  9 10 11
    10 11 12 13 14 15 16  15 16 17 18 19 20 21  12 13 14 15 16 17 18
    17 18 19 20 21 22 23  22 23 24 25 26 27 28  19 20 21 22 23 24 25
    24 25 26 27 28 29 30  29 30 31              26 27 28 29 30


             七月                    八月                    九月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                    1  2      1  2  3  4  5  6               1  2  3
     3  4  5  6  7  8  9   7  8  9 10 11 12 13   4  5  6  7  8  9 10
    10 11 12 13 14 15 16  14 15 16 17 18 19 20  11 12 13 14 15 16 17
    17 18 19 20 21 22 23  21 22 23 24 25 26 27  18 19 20 21 22 23 24
    24 25 26 27 28 29 30  28 29 30 31           25 26 27 28 29 30
    31

             十月                   十一月                   十二月
    日 一 二 三 四 五 六  日 一 二 三 四 五 六  日 一 二 三 四 五 六
                       1         1  2  3  4  5               1  2  3
     2  3  4  5  6  7  8   6  7  8  9 10 11 12   4  5  6  7  8  9 10
     9 10 11 12 13 14 15  13 14 15 16 17 18 19  11 12 13 14 15 16 17
    16 17 18 19 20 21 22  20 21 22 23 24 25 26  18 19 20 21 22 23 24
    23 24 25 26 27 28 29  27 28 29 30           25 26 27 28 29 30 31
    30 31
    ```

    如果加两个参数，则第一个参数表示月份，第二个参数表示年份

    ```shell
    cy-com@cycom:~/workspace$ cal 5 2016
          五月 2016
    日 一 二 三 四 五 六
     1  2  3  4  5  6  7
     8  9 10 11 12 13 14
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31

    ```

5. clear

    `clear`命令清除屏幕上的信息

6. passwd

    `passwd`命令把原来的口令改为一个更安全的字符串

    ```shell
    cy-com@cycom:~/workspace$ passwd
    Changing password for cy-com.
    (current) UNIX password:
    Enter new UNIX password:
    Retype new UNIX password:
    ```

## 文件类型
### 普通文件
普通文件也称**常规文件**，包含各种长度的字符串。

它又包括以下几个类型：

1. 文本文件：它由 ASCII 字符构成。例如，新建、报告和脚本

2. 数据文件：它由来自应用程序的数字型和文本型数据构成。例如，电子表格、数据库及字处理文档

3. 可执行的二进制程序文件：它由机器指令和数据构成

可以使用`file`命令来确定指定文件的类型，该命令格式为：

```shell
file 文件名 [文件名...]
```

```shell
cy-com@cycom:~/workspace$ file demo.txt
demo.txt: ASCII text
```

### 目录文件
目录文件是一种特殊的文件，利用它可以构成文件系统的分层树形结构。如普通文件一样，目录文件也包含数据，但目录文件与普通文件的差别是：**核心对这些数据进行结构化处理，即它是由成对的“I 节点号/文件名”构成的列表**：

1. **I 节点号**是检索 I 节点表的下表，I 节点中存放有文件的状态信息

2. **文件名**是给一个文件分配的文本形式的字符串，用来标记该文件。**在一个指定的目录中，任何两项都不能有同样的名字**

### 设备文件
设备文件是一种特别的文件，除了在其文件 I 节点中存放属性信息外，它们不包含任何数据。系统利用它们来标记各个设备驱动器，核心使用它们与硬件设备通讯。

有两类特别设备文件，它们对应不同类型的设备驱动器：

1. **字符设备**。最常用的设备类型，允许 I/O 传送任意大小的数据，取决于设备本身的容量。使用这种接口的设备包括终端、打印机及鼠标

2. **块设备**。这类设备利用核心缓冲区的自动缓存机制。缓冲区进行 I/O 传送总是以 KB 为单位。使用这种接口的设备包括硬盘、软盘和 RAM 盘

### 符号链接文件
**符号链接文件**是一种特殊文件，提供对其他文件的**参照**。它们存放的数据是文件系统通向文件的路径。当使用符号链接文件时，核心自动访问所保存的这个路径。

## 文件操作命令
### 文件显示命令
1. cat

    `cat`命令**连接文件**并打印到标准输出设备上

    1. 一般格式

    ```shell
    cat [选项] 文件
    ```

    2. 说明

        该命令有两项功能，一是显示文件的内容，它依次读取由参数 file 所指明的文件，将他们的内容输出到标准输出上；二是连接两个或多个文件，如`cat f1 f2 > f3`将把文件 f1 和 f2 的内容合并起来，然后通过输出重定向符`>`的作用，将它们放入文件 f3 中

    3. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-b, --number-noblank|从 1 开始对所有非空输出行编号|
    |-n, --number|从 1 开始对所有输出行编号|
    |-s, --squeeze-blank|将多个相邻的空行合并成一个空行|
    |--help|打印该命令用法，并退出，其返回码表示成功|

    4. 示例

    ```shell
    [15:28:52] yrh:shell_ws $ cat f1
    a
    b
    c
    e

    [15:29:26] yrh:shell_ws $ cat f2
    e
    f
    g
    h

    [15:29:32] yrh:shell_ws $ cat f1 f2
    a
    b
    c
    e
    e
    f
    g
    h

    [15:29:59] yrh:shell_ws $ cat f1 f2 > f3
    [15:30:04] yrh:shell_ws $ cat f3
    a
    b
    c
    e
    e
    f
    g
    h
    ```

2. more

    `more`命令显示文件内容，每次显示一屏

    1. 一般格式

    ```shell
    more [选项] 文件
    ```

    2. 说明

        该命令一次显示一屏文本，满屏后停下来，并且在屏幕底部出现一个提示信息，给出至今已显示的该文件的百分比：`---More---(xx%)`

        可以用下列不同的方法对提示做出回答：
        - 按 Space 键，显示文本的下一屏内容
        - 按 Enter 键，只显示文本的下一行内容
        - 按斜线符（/），接着输入一个模式，可以在文本中寻找下一个相匹配的模式
        - 按 H 键，显示帮助屏，该屏上有相关的帮助信息
        - 按 B 键，显示上一屏内容
        - 按 Q 键，退出 more 命令

    3. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-num|指定一个整数，表示一屏显示多少行|
    |-d|在每屏的底部显示更友好的提示信息|
    |-c或-p|不滚屏，在显示下一屏之前先清屏|
    |-s|将文件中连续的空白行压缩成一个空白行显示|
    |+/|该选项后的模式（pattern）指定显示每个文件之前进行搜索的字符串|
    |+num|从行号 num 开始|

    4. 示例
    ```shell
    # 显示文件 mfile 内容，在现实之前先清屏，并在屏幕下方显示完整的百分比
    [15:46:10] yrh:shell_ws $ more -dc mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    ...
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    --More--(11%)[Press space to continue, 'q' to quit.]

    # 显示文件 mfile 内容，每 10 行显示一次，而且在显示之前先清屏
    [15:47:33] yrh:shell_ws $ more -c -10 mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    --More--(4%)
    ```

3. less

    `less`与`more`命令一样，也用来分屏显示文件内容。但是二者的差别在于：`less`允许用户向前或向后浏览文件，而`more`只能向前浏览。

    用`less`命令显示文件时，用 PageUp 键向上翻页，用 PageDown 键向下翻页。要退出程序，应按 Q 键

4. head

    `head`命令在屏幕上显示指定文件的开头若干行

    1. 一般格式

    ```shell
    head [选项] file
    ```

    2. 说明

        `head`命令在屏幕上显示指定文件的开头若干行，行数由参数值来确定。显示行数的默认值是 10

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--bytes=[-]N|显示每个文件前面 N 字节。<br>如果数字 N 前面带有“-”，则分别显示每个文件除最后 N 字节外的所有内容|
    |-n,--lines=[-]N|显示指定文件的前面 N 行，而不是默认的 10 行<br>如果数字 N 前面带有“-”，则分别显示每个文件除最后N 行以外的所有内容|
    |-q,-quiet,--silent|不显示给定文件的标题|
    |-v,--verbose|始终显示给定文件的标题|

    4. 示例

    ```shell
    cy-com@cycom:~/workspace$ head -5 mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz

    cy-com@cycom:~/workspace$ head -v mfile
    ==> mfile <==
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz

    cy-com@cycom:~/workspace$ head -q mfile
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    abcdefghijklmnopqrstuvwxyz
    ```

5. tail

    `tail`命令在屏幕上显示指定文件的末尾若干行

    1. 一般格式

    ```shell
    tail [选项] [file]...
    ```

    2. 说明

        `tail`命令在屏幕上显示指定文件的末尾 10 行，如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或文件名为“-”，则读取标准输入

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--bytes=N|输出最后 N 个字节|
    |-f|当文件增长时输出附加的数据|
    |-n,--lines=N|输出最后 N 行，而不是默认的 10 行|
    |-q,-quiet,--silent|不输出包含给定文件名的标题|
    |-v,--verbose|始终输出包含给定文件名的标题|

    4. 注意

        如果表示字节或行数的 N 值之前有一个“+”，则从文件开头的第 N 项开始显示，而不是显示文件的最后 N 项。N 值后面可以有后缀：b 表示 512，k 表示 1024，m 表示 1 048 576（1M）

    5. 示例

    ```shell
    cy-com@cycom:~/workspace$ tail mfile1
       192  abcdefghijklmnopqrstuvwxyz
       193  abcdefghijklmnopqrstuvwxyz
       194  abcdefghijklmnopqrstuvwxyz
       195  abcdefghijklmnopqrstuvwxyz
       196  abcdefghijklmnopqrstuvwxyz
       197  abcdefghijklmnopqrstuvwxyz
       198  abcdefghijklmnopqrstuvwxyz
       199  abcdefghijklmnopqrstuvwxyz
       200  abcdefghijklmnopqrstuvwxyz
       201  abcdefghijklmnopqrstuvwxyz
    cy-com@cycom:~/workspace$ tail -c 10 mfile1
    rstuvwxyz
    ```

6. touch

    `touch`命令可以修改指定文件的**时间标签**或者**创建一个空文件**

    1. 一般格式

    ```shell
    touch [选项] 文件名...
    ```

    2. 说明

        `touch`命令将会修改指定文件的时间标签，把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来。如果该文件尚未存在，则建立一个空的新文件

    3. 选项

    |选项|作用|
    |:---:|:---:|
    |-a|仅改变指定文件的存取时间|
    |-c,--no-create|不创建任何文件|
    |-m|仅改变指定文件的修改时间|
    |-t STAMP|使用 STAMP 指定的时间标签，而不是系统当前的时间|

    4. 示例

    ```shell
    cy-com@cycom:~/workspace$ touch demo.txt
    cy-com@cycom:~/workspace$ ls
    demo.txt
    ```

### 匹配、排序及显示指定内容的命令
1. grep

    该命令在**文本文件**中查找指定模式的词或短语，并在标准输出设备上显示包括给定字符串模式的所有行。该命令组包含三个命令：`grep`、`egrep`和`fgrep`命令。`grep`命令一次只能搜索一个指定的模式；`egrep`命令等同于`grep -E`，可以使用扩展的字符串模式进行搜索；`fgrep`命令等同于`grep -F`，是快速搜索命令，它检索固定字符串，但不识别正则表达式

    1. 一般格式

    ```shell
    grep [选项] 查找模式 [文件名1，文件名2，...]
    grep [选项] [-e 查找模式|-f 文件] [文件名1，文件名2，...]
    ```

    2. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-E|将查找模式解释成扩展的正则表达式|
    |-F|将查找模式解释成单纯的字符串|
    |-b,--byte-offset|在输出的每一行显示包含匹配字符串的行在文件中的位置<br>用字节偏移量表示|
    |-c,--count|只显示文件中包含匹配字符串的行的总数|
    |-f FILE|从文件 FILE 中获取模式，每行一个<br>空文件不含模式，因此不做匹配|
    |-i,--ignore-case|匹配比较时不区分字母的大小写|
    |-R,-r,--recursive|以递归方式查询目录下的所有子目录中的文件|
    |-n|在输出包含匹配模式的行之前，加上该行的行号|
    |-v|只显示不包含匹配字符串的文本行|
    |-x|只显示整个行都严格匹配的行|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    ghi
    jkl
    mno
    pqrst
    uvwx
    yz

    cy-com@cycom:~/workspace$ grep -En 'k' mfile
    4:jkl

    cy-com@cycom:~/workspace$ grep -i 'K' mfile
    jkl
    ```

2. sort

    `sort`命令对文本文件的各行进行排序

    1. 一般格式

    ```shell
    sort [选项] 文件列表
    ```

    2. 常用选项

    |选项|作用|
    |:---:|:---:|
    |-m,--merge|对已经排好序的文件统一进行合并，但不做排序|
    |-c,--check|检查给定的文件是否已排好序，若没有，则显示出错信息，不排序|
    |-u,--unique|与 -c 选项一起用，严格地按顺序检查；否则，堆排序后的重复行只输出第一行|
    |-o,--ouput=FILE|将排序输出放到该文件名所指定的文件 FILE 中。<br>如果该文件不存在，则创建一个新文件|
    |-d,--dictionary-order|按字典顺序排序，比较时仅考虑空白符和字母数字|
    |-f,--ignore-case|忽略字母的大小写|
    |-i,--ignore-nonprinting|忽略非打印字符|
    |-M,--month-sort|规定月份的比较次序|
    |-r,reverse|按逆序排序。默认排序输出是按升序排序的|
    |-k,--key=n1[, n2]|指定从文本行的第 n1 字段开始至第 n2 字段的内容作为排序关键字|
    |-b|比较关键字时忽略前导的空白符（空格或制表符）|
    |-t 字符|将指定“字符”作为字段间的分隔符|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    ghi
    jkl
    mno
    pqrst
    uvwx
    yz

    cy-com@cycom:~/workspace$ sort -r mfile
    yz
    uvwx
    pqrst
    mno
    jkl
    ghi
    def
    abc
    ```

3. uniq

    `uniq`命令从排好序的文件中**去除重复行**

    1. 一般格式

    ```shell
    uniq [选项] [输入文件 [输出文件]]
    ```

    2. 选项

    |选项|作用|
    |:---:|:---:|
    |-c,--count|显示输出时，在每行的行首加上该行在文件中出现的次数|
    |-d,--repeated|只显示重复行|
    |-f,--skip-fields=N|忽略比较前 N 个字段|
    |-s,--skip-chars=N|忽略比较前 N 个字符|
    |-u,--unique|只显示文件中不重复的行|

    3. 示例

    ```shell
    cy-com@cycom:~/workspace$ cat mfile
    abc
    def
    jkl
    mno
    mno
    mno
    uvwx
    yz

    cy-com@cycom:~/workspace$ uniq mfile
    abc
    def
    jkl
    mno
    uvwx
    yz
    ```

### 文件内容统计命令
`wc`命令统计指定文件的字节数、字数、行数，并将统计结果显示出来

1. 一般格式

```shell
wc [选项] [文件]...
```

2. 说明

    `wc`输出列的顺序和数目不受选项顺序和数目的影响，总是按以下格式显示，并且每项只占一列：

    ```
    行数  字数  字节数 文件名
    ```

3. 常用选项

|选项|作用|
|:---:|:---:|
|-c,--bytes|统计字节数|
|-l,--lines|统计行数|
|-w,--words|统计字数|

4. 示例

```shell
cy-com@cycom:~/workspace$ cat mfile
abc
def
jkl
mno
mno
mno
uvwx
yz

cy-com@cycom:~/workspace$ wc -lcw mfile
 8  8 32 mfile
```

## 执行 Shell 脚本的方式
1. 输入定向到 shell 脚本

    该方式用输入重定向方式让 shell 从给定文件中读入命令行，并进行相应处理

```
cy-com@cycom:~/workspace$ cat ex1
date

cy-com@cycom:~/workspace$ bash < ex1
2016年 05月 16日 星期一 17:29:31 CST
```

2. 以脚本名作为 bash 参数

    一般形式为`bash 脚本名 [参数]`

```shell
cy-com@cycom:~/workspace$ bash ex1
2016年 05月 16日 星期一 17:31:48 CST
```

3. 将 shell 脚本的权限设置为可执行，然后在提示符下直接执行

```shell
cy-com@cycom:~/workspace$ chmod a+x ex1
cy-com@cycom:~/workspace$ ./ex1
2016年 05月 16日 星期一 17:33:17 CST
```

## 显示历史命令
`history`命令显示命令历史表中的命令，其语法格式为：

```shell
history [option] [arg...]
```