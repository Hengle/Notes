#算法设计与分析笔记
Author：Yrh
Time：2015-11-28
## 第一章 算法概述
- **算法（algorithm）**是指在解决问题时，按照某种**机械步骤**一定可以得到问题结果（有解时给出问题的解，无解时给出无解的结论）的处理过程。
- **算法**就是解决这个问题的方法和步骤的描述。
- 所谓**机械步骤**是指：算法中有待执行的运算和操作，必须是相当基本的。换言之，它们都是能够精确地被计算机运行的算法，执行者（计算机）甚至不需要掌握算法的含义，即可根据该算法的每一步骤要求，进行操作并最终得出正确的结果。
- **算法**的三要素：操作、控制结构、数据结构。
- **算法**要满足以下性质：
    - 目的性：算法有明确的目的，算法能完成赋予它的功能。
    - 分布性：算法为完成其复杂的功能，由一系列计算机可执行的步骤组成。
    - 有序性：算法的步骤是有序的，不可随意改变算法步骤的执行顺序。
    - 有限性：算法是有限的指令序列，算法所包含的步骤是有限的。
    - 操作性：有意义的算法总是对某些对象进行操作，使其改变状态，完成其功能。
- **算法设计（designing algorithm）**是研究设计算法的**规律**和**方法**
- 算法设计方法：
    - **结构化方法** 
    <br>其优越性：
        1. **自顶向下逐步求精**的方法符合人类解决复杂问题的普遍规律，因此可以显著提高软件开发工程的成功率和生产率。
        2. 用**先全局后局部、先整体后细节、先抽象后具体**的逐步求精过程开发出的算法有清晰的层次结构，因此很容易阅读和理解。  
    - **面向对象方法** 
    <br>其特征为：
        1. 抽象化——将各种独立的操作分解成为可以用命令区分的单元。
        2. 封装性——不同的操作具有不同的作用范围。
        3. 多态性——对于不同数据类型的相似操作使用相同的命名。
        4. 继承性——类可以被继承，从而实现不同层次的对象。
- 算法表示方式：
    1. 自然语言
        - 缺点：
            1. 由于自然语言容易有**歧义性**，可能导致算法描述的不确定性。
            2. 自然语言的语句一般**太长**，从而导致描述的算法太长。
            3. 由于自然语言有串行性的特点，因此当一个算法中**循环**和**分支**较多时就很难清晰地表示出来。
            4. 自然语言表示的算法不便用**程序设计语言**翻译成计算机程序。
    2. 流程图
        - 缺点：
            1. 不是**逐步求精**的好工具，有时会诱使算法设计人员过早地考虑算法的控制流程，而不去考虑算法的全局结构。
            2. **随意性**太强，**结构化**不明显。
            3. 不易表示**数据结构**。
            4. 流程图的**层次感**不明显。
    3. 盒图
        - 优点：
            1. 层次感强、嵌套明确。
            2. 支持自顶向下、逐步求精。
            3. 容易转换成高级语言源算法。
        - 缺点：
            1. 不易**扩充**和**修改**，不易描述大型复杂算法。
    4. PAD图
        - 优点：
            1. 使用表示结构化控制结构的PAD符号设计出来的算法必是结构化的。
            2. PAD图描绘的算法结构清晰。
            3. 用PAD图表现算法逻辑，易读，易懂，易记。
            4. 容易用软件工具自动将PAD图转换成高级语言源算法。
            5. 既可用于表示算法逻辑，也可用于描绘数据结构。
            6. PAD图的符号，支持自顶向下、逐步求精。
        - 缺点：
            1. 由于是图形化符号书写，**编辑**、**录入**不方便。
    5. 伪代码
    6. 程序设计语言
        - 优点：
            1. 一般而言，计算机程序设计语言描述的算法程序是清晰的、简明的而且是最严谨的，最终也能由计算机处理的。
        - 缺点：
            1. 与自然语言一样程序设计语言也是基于串行的表示方法，当算法的逻辑流程较为复杂的时，算法的基本逻辑流程难以遵循。
            2. 用特定程序设计语言编写的算法，限制了与其他算法设计人员的交流，不利于算法质量提高。
            3. 要花费大量的时间去熟悉和掌握某种特定的程序设计语言。
            4. 要求描述计算步骤的细节而忽略算法的本质。
            5. 需要考虑语法细节，可能干扰算法设计的思路。
            6. 考虑到程序设计语言的不断更新，不适合用于描述算法。

## 第二章 算法分析基础
- 算法分析的评价体系
    + 维护性
        * 可读性
        * 通用性
        * 可重用性
        * 可扩充性
    + 运行效率
    + 人机交互
        * 友好性
        * 健壮性
- 算法的时间复杂性
    + 相关因素
        1. 问题中数据存储的数据结构
        2. 算法采用的数学模型
        3. 算法设计的策略。
        4. 问题的规模
        5. 实现算法的程序设计语言。
        6. 编译算法产生的机器代码的质量。
        7. 计算机执行指令的速度。
    + 衡量方法
        1. 事后分析法（较少使用）
        2. 事前分析估算法
    + 常见的时间复杂度（从上到下数量级依次增加）
        1. O(1) 称为常数级。
        2. O(logn) 称为对数级。
        3. O(n) 称为线性级。
        4. O(n^c) 称为多项式级。
        5. O(c^n) 称为指数级。
        6. O(n!) 称为阶乘级。
- 算法的空间复杂性
    + 相关因素
        1. 输入数据所占空间
        2. 算法（程序）本身所占空间
        3. 辅助变量所占空间
